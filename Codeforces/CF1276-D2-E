/*
  We do binpoisk over the even and odd numbers separately. To count the amount of numbers, from which we will visit the number i we 
  maintain l and r and add the length of segment[l, r] to the answer.
*/
#include <bits/stdc++.h>
#define pb push_back
#define pll pair <ll, ll>
#define mp make_pair
#define pyshnapyshnakaa ios_base :: sync_with_stdio(0); cin.tie(0); cout.tie(0);
#pragma optimize("TKACHENKO-GORYACHENKO")
#pragma GCC optimize("O3")
// #pragma GCC optimize("Ofast")
// #pragma GCC optimize("unroll-loops")
#define psl pair <string, ll>
#define pls pair <ll, string>
 
typedef long long ll;
 
typedef long double ld;
 
using namespace std;
 
const ll maxn = 1e6 + 100;
 
ll n, m, k;
 
ll X[maxn];
 
ll Y[maxn];
 
ll st2[maxn];
 
bool can(ll x) {
	if (x > n) {
		return 0;
	}
	// cout << "X " << x << endl;
	ll l = x, r = x + 1;
	ll ans = 0;
	if (x % 2 == 1) {
		ans++;
		l *= 2;
		r = l + 1;
		// r++;
	}
	while (r <= n) {
		// cout << l << " " << r << endl;
		ans += r - l + 1;
		r *= 2;
		r++;
		l *= 2;
	}
	r = n;
	// cout << x << " " << ans << endl;
	ans += max((ll)0, r - l + 1);
	return ans >= k;
}
 
int main()
{
	ll q, w, e, a, b;
	pyshnapyshnakaa;
	cin >> n >> k;
	// st2[0] = 1;
	// for (q = 1; q < 65; q++) {
	// 	st2[q] = st2[q - 1] * 2;
	// }
	// cout << st2[62] << endl;
	// cout << can(31248) << endl;
	// return 0;
	// cout << can(5) << endl;
	// return 0;
	ll L = 0, R = n, M;
	ll ans = 1;
	// cout << can(3) << endl;
	// return 0;
	while (R - L > 1) {
		M = (L + R) / 2;
		if (can(2 * M)) {
			L = M;
		}
		else {
			R = M;
		}
	}
	ans = max(ans, 2 * L);
	L = 0, R = n;
	while (R - L > 1) {
		M = (L + R) / 2;
		if (can(2 * M + 1)) {
			L = M;
		}
		else {
			R = M;
		}
	}
	ans = max(ans, 2 * L + 1);
	cout << ans;
	return 0;
}
