/*
    We find for every i how many moves we have to make to make the suffix [i; n] non-decreasing.
    We do it from i = n - 1 to i = 0. We keep indexes in which we didn't make any extra moves in stack because
    when we multiply one element by 4 we have to multiply all the elements after it by 4 too until the element from
    stack;
    We count this thing for array given and that array reversed;
    After that we brute force the place where is the last negative element in our answer and for every such place
    we find the answer using the pre-counted arrays;
*/


#include <bits/stdc++.h>
#include <complex>
#define pb push_back
#define pll pair <ll, ll>
#define MOMI using namespace std;
#define mp make_pair
#define pyshnapyshnakaa ios_base :: sync_with_stdio(0); cin.tie(0); cout.tie(0);
#pragma optimize("TKACHENKO-GORYACHENKO")
#pragma GCC optimize("O3")

//#pragma GCC optimize("unroll-loops")
//#define double long double

typedef long long ll;

typedef long double ld;

using namespace std;

const ll maxn = 3e5;
const ll inf = 1e16;

ll n, m, k;

ll st2[maxn];

vector <ll> dp(vector <ll> A){
    vector <ll> DP;
//    A.pb(inf);
    DP.resize(n);
    DP[n - 1] = 0;
    ll q;
//    vector <ll> L;
    vector <pll> LAST;
    LAST.pb(mp(n - 1, inf));
//    L.pb(inf);
    for (q = n - 2; q >= 0; q--){
        ll c = 0;
        ll a = A[q], b = A[q + 1];
        while (a > b){
            c++;
            b *= 4;
        }
//        cout << "q c " << q << " " << c << endl;
        if (c == 0){
            DP[q] = DP[q + 1];
            ll c1 = -1;
            ll a1 = A[q + 1], b1 = A[q];
            while (a1 >= b1){
                c1++;
                b1 *= 4;
            }
            LAST.pb(mp(q, c1));
//            L.pb(c1);
//            cout << "DP " <<  q << " " << DP[q] << endl;
            continue;
        }
        ll ans = DP[q + 1];
        ll nc = c;
        ll j = q;
        while (1){
            ll last = LAST[LAST.size() - 1].second;
            ll i = LAST[LAST.size() - 1].first;
            ans = ans + nc * (i - j);
//            cout << nc << " nc" << endl;
            if (last >= nc){
                LAST[LAST.size() - 1].second -= nc;
                break;
            }
            else{
//                if (LAST.size() == 1){
//                    break;
//                }
                nc = nc - last;
                j = i;
//                cout << j << " " << dc << " j dc" << endl;
                LAST.pop_back();
//                L.pop_back();
//                ll dl = L[L.size() - 1];
//                if (LAST.size() == 0){
//                    break;
//                }
//                LAST[LAST.size() - 1].second -= dl;

            }
        }
//        ll last = LAST[LAST.size() - 1].first;
        DP[q] = ans;
//        cout << "DP " <<  q << " " << DP[q] << endl;
    }
    return DP;
}

int main() {
    ll q, w, e, a, b;
//    pyshnapyshnakaa;
    st2[0] = 1;
    vector <ll> A;
    for (q = 1; q < 50; q++){
        st2[q] = st2[q - 1] * 2;
    }
    cin >> n;
    A.resize(n);
    for (q = 0; q < n; q++){
        cin >> A[q];
    }
    vector <ll> DP1 = dp(A);
//    cout << "DP1" << endl;
//    for (q = 0; q < n; q++){
//        cout << DP1[q] << " ";
//    }
//    cout << endl << endl << endl;
    reverse(A.begin(), A.end());
    vector <ll> DP2 = dp(A);
    reverse(DP2.begin(), DP2.end());
//    cout << "DP2" << endl;
//    for (q = 0; q < n; q++){
//        cout << DP2[q] << " ";
//    }
//    cout << endl;
    ll ans = 2 * min(DP1[0], DP2[n - 1] + n);
    for (q = 0; q < n - 1; q++){
        ans = min(ans, 2 * DP1[q + 1] + q + 1 + 2 * DP2[q]);
    }
    cout << ans;
    return 0;
}
