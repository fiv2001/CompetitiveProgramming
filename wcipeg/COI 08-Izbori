/*
    It's easy to find the maximum seats a party i can have: we say that all the votes not counted yet are for the party i and then 
    stupidly simulate the elections. To find the minimum number of seats for the party i we do binary search on the amount of seats it can have.
    We check if a party can have at least x seats this way: say dp[i][j] is the minimum amount of voices we have to add to the first i 
    parties(except the party we minimize) so that they take j seats. We count this dp in O(n^3), binary search in O(log(n)) and the 
    number of parties we need to check is not bigger than 20(because the answer for the parties taking less than 5% of votes is 0), 
    so that total complexity is 20 * log(n) * (n ^ 3)
*/
#include <bits/stdc++.h>
#define pb push_back
#define pll pair <ll, ll>
#define MOMI using namespace std;
#define mp make_pair
#define pyshnapyshnakaa ios_base :: sync_with_stdio(0); cin.tie(0); cout.tie(0);
#pragma optimize("TKACHENKO-GORYACHENKO")
#pragma GCC optimize("O3")
#pragma GCC optimize("unroll-loops")
 
typedef int ll;
 
typedef long double ld;

using namespace std;

const ll inf = 1e9;
const ll maxn = 2e2 + 20;

ll n, m, k, v, sum;

ll A[maxn];

ll ANS1[maxn];

ll ANS2[maxn];

inline void getans1() {
	ll q, w, e;
	for (q = 0; q < n; q++) {
		A[q] += (v - sum);
		ll S[maxn];
		for (w = 0; w < n; w++) {
			S[w] = 0;
		}
		for (w = 0; w < m; w++) {
			ll i = -1;
			pll best = mp(0, 1);
			for (e = 0; e < n; e++) {
				if (A[e] * 20 < v) {
					continue;
				}
				pll nw = mp(A[e], S[e] + 1);
				if (best.first * nw.second < best.second * nw.first) {
					best = nw;
					i = e;
				}
			}
			S[i]++;
		}
		ANS1[q] = S[q];
		A[q] -= (v - sum);
	}
}

ll D[maxn][maxn];

inline ll getdx(ll i, ll x, pll bad, ll badi) {
	ll ans;
	if (badi > i) {
		ans = (x * bad.first + bad.second - 1) / (bad.second);
	}
	else {
		ans = (x * bad.first + bad.second) / (bad.second);
	}
	ans = max(ans, (v + 19) / 20);
	ll dx = max((ll)0, ans - A[i]);
	if (x == 0) {
		dx = 0;
	}
	// cout << "DX " << dx << " " << i << " " << x << endl;
	// if ((x == 0 && dx != 0)) {
	// 	cout << "DX " << dx << " " << i << " " << x << endl;
	// }
	return dx;
}

inline bool can_ban(ll x, ll i) {
	ll q, w, e;
	if (n == 1) {
		return 0;
	}
	for (q = 0; q < maxn; q++) {
		for (w = 0; w < maxn; w++) {
			D[q][w] = inf;
		}
	}
	// vector <ll> A1;
	// for (q = 0; q < n; q++) {
	// 	A1.pb(A[q]);
	// }
	// swap(A1[0], A1[i]);
	pll bad = mp(A[i], x);
	// cout << "BAD " << bad.first << " " << bad.second << endl;
	D[0][0] = 0;
	for (q = 1; q < n; q++) {
		for (w = 0; w <= m - x + 1; w++) {
			for (e = 0; e <= w; e++) {
				ll j = q;
				if (q == i) {
					j = 0;
				}
				ll dd = D[q - 1][w - e] + getdx(j, e, bad, i); 
				D[q][w] = min(D[q][w], dd); 
			}
			// cout << q << " " << w << " " << D[q][w] << endl;
		}
	}
	// cout << "ANSD " << D[n - 1][m - x + 1] << " I " << i << " X " << x << endl;
	// cout << endl << endl;
	if (D[n - 1][m - x + 1] > v - sum) {
		return 0;
	}
	return 1;
}

inline void getans2() {
	ll q, w;
	for (q = 0; q < n; q++) {
		if (A[q] * 20 < v) {
			ANS2[q] = 0;
			continue;
		}
		ll L = 0, R = m + 1, M;
		while (R - L > 1) {
			M = (L + R) / 2;
			if (can_ban(M, q)) {
				R = M;
			}
			else {
				L = M;
			}
		}
		ANS2[q] = L;
	}
}

signed main() {
	ll q, w, e, a, b, c;
	cin >> v >> n >> m;
	for (q = 0; q < n; q++) {
		cin >> A[q];
		sum += A[q];
	}
	getans1();
	getans2();
	for (q = 0; q < n; q++) {
		cout << ANS1[q] << " ";
	}
	cout << endl;
	for (q = 0; q < n; q++) {
		cout << ANS2[q] << " ";
	}
	// cout << endl;
	return 0;
}
